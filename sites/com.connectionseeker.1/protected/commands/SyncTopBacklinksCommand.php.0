<?php
//http://www.yiiframework.com/wiki/91/implementing-cron-jobs-with-yii/
//http://www.yiiframework.com/forum/index.php?/topic/26551-setting-up-cronjob/
//How to call this script in crontab: php /path/to/cron.php syncTopBacklinks
/*
D:\WEBIDE\Language\php>php -q K:\NewHtdocs\yii\yii1.1.8.dev\sites\com.connectionseeker\cron.php syncTopBacklinks p1 p2
the $args will returns as following
array(
    [0] => p1
    [1] => p2
)
*/
Yii::import('application.vendors.*');

class SyncTopBacklinksCommand extends CConsoleCommand {
    public function run($args) {
        //ini_set('max_execution_time', 0);
        set_time_limit(0);
        ini_set("memory_limit", "512M");

        // here we are doing what we need to do
        //echo "it returns!";
        //print_r($args);

        /*
        $cdmodel = new ClientDomain;
        $c = $cptmodel->findByAttributes(array('fresh_called' => "IS NULL"));
        //var_dump($cdmodel);
        */

        /*
        (cd.use_historic_index=1 AND cdc.historic_called IS NULL) 
           OR
        (cd.use_historic_index=0 AND cdc.fresh_called IS NULL) 

        array('or',
              array('and', 'cd.use_historic_index=1', 'cdc.historic_called IS NULL'),
              array('and', 'cd.use_historic_index=0', 'cdc.fresh_called IS NULL'))
        */

        $competitor = Yii::app()->db->createCommand()
            ->select('c.id, c.domain, cd.use_historic_index, c.fresh_called, c.historic_called, cdc.competitor_id')
            ->from('{{competitor}} c')
            ->join('{{client_domain_competitor}} cdc', 'c.id=cdc.competitor_id')
            ->join('{{client_domain}} cd', 'cdc.domain_id=cd.id')
            ->where(array('or', array('and', 'cd.use_historic_index=1', 
                                             array('or', 'cdc.historic_called IS NULL', 'cdc.historic_called=0')),
                                array('and', 'cd.use_historic_index=0', 
                                             array('or', 'cdc.fresh_called IS NULL', 'cdc.fresh_called=0'))))
            //->where('id=:id', array(':id'=>$id))
            ->queryRow();
            //->limit(2)
            //->queryAll();

        //print_r($competitor);

        if (!$competitor) {
            echo "No new competitors!";
            return false;
        }
        $competitor_id = $competitor['competitor_id'];

        /*
        $cptmodel = new Competitor;
        $cpt = $cptmodel->findByPk($competitor_id);
        //print_r($cpt);
        */

        $callapi = false;
        $daysoffset = 86400 * 90;//90 days
        if ($competitor['use_historic_index']) {
            //data expired,we need call the api again;
            //if (empty($cpt->historic_called) || $cpt->historic_called + $daysoffset < time()) {
            if (empty($competitor['historic_called']) || $competitor['historic_called'] + $daysoffset < time()) {
                $datasource = 'historic';
                $callapi = true;
            } else {
                //we need update the lkm_client_domain_competitor.historic_called
                $update = Yii::app()->db->createCommand()
                    ->update('{{client_domain_competitor}}', array('historic_called'=>$competitor['historic_called'],),
                                                            'competitor_id=:cid', array(':cid'=>$competitor_id));
            }
        } else {
            //if (empty($cpt->fresh_called) || $cpt->fresh_called + $daysoffset < time()) {
            if (empty($competitor['fresh_called']) || $competitor['fresh_called'] + $daysoffset < time()) {
                $datasource = 'fresh';
                $callapi = true;
            } else {
                //we need update the lkm_client_domain_competitor.fresh_called
                //$cdcmodel = new ClientDomainCompetitor;
                $update = Yii::app()->db->createCommand()
                    ->update('{{client_domain_competitor}}', array('fresh_called'=>$competitor['fresh_called'],),
                                                            'competitor_id=:cid', array(':cid'=>$competitor_id));
            }
        }

        if (!$callapi) return false;

        $mjurl = "http://www.majesticseo.com/api_command.php?app_api_key=2F2DE59CC1A7DC7D88149BB6D525FC8C&cmd=GetTopBackLinks&MaxSourceURLs=1000&GetRootDomainData=1&AnalysisResUnits=10000&ShowDomainInfo=1&GetUrlData=0&UseResUnits=1&URL=".urlencode($competitor['domain']);

        $mjurl .= "&datasource={$datasource}";

        echo $mjurl;


        //$mjurl = "http://sites.com/sites/com.connectionseeker/a.txt";
        //$mjurl = "http://sites.com/sites/com.connectionseeker/rsf.com.txt";

        $fstr = file_get_contents($mjurl);
//        file_put_contents("/var/www/html/commonframework/sites/com.connectionseeker/protected/runtime/" . $competitor['domain'] . ".txt", $fstr);
//        die();

        $total = 0;
        if ($fstr) {
            $calledtime = time();//this is version control,we need lock this competitor domain
            $rs = simplexml_load_string($fstr);
            $datatables = $rs->DataTables->DataTable;
            if ($datatables) {
                //##### Transaction Start ######//
                $transaction = Yii::app()->db->beginTransaction();
                try {

                    if ($datasource == 'historic') {
                        $fresh_called = 0;
                        $historic_called = $calledtime;
                    } else {
                        $fresh_called = $calledtime;
                        $historic_called = 0;
                    }

                    $update = Yii::app()->db->createCommand()
                        ->update('{{client_domain_competitor}}', array('historic_called' => $historic_called,
                                                                       'fresh_called'    => $fresh_called,),
                                                                'competitor_id=:cid', array(':cid'=>$competitor_id));

                    //update the table.competitor's last call api time
                    $update = Yii::app()->db->createCommand()
                        ->update('{{competitor}}', array('historic_called' => $historic_called,
                                                         'fresh_called'    => $fresh_called,),
                                                   'id=:id', array(':id'=>$competitor_id));


                    //本来可以放在同一个foreach循环里面，但是他们返回的结果集的位置是先rootdomain的信息，然后才是domains info
                    //为了让插入数据库更高效，由于不清楚他们是否未来还会改变其返回位置的先后顺序，因此，这里做了2次foreach。
                    $dn = array();

                    foreach ($datatables as $row) {
                        if (strtolower($row['Name']) == 'domainsinfo') {
                            //echo $i."Here";
                            $dsheader = strtolower($row['Headers']);
                            //$dbks = str_replace("|", "`,`", $dsheader);
                            $hds = explode("|", $dsheader);
                            //print_r($hds);

                            foreach($row->Row as $r) {
                                $vs = explode("|", $r);
                                //print_r($vs);
                                $dinfo = array_combine($hds, $vs);
                                //print_r($dinfo);
                                //old domain
                                $do = Yii::app()->db->createCommand()->select('id')->from('{{domain}}')
                                    ->where('domain=:domain', array(':domain'=>$dinfo['domain']))
                                    ->queryRow();
                                $idx = $dinfo['domainid'];

                                unset($dinfo['domainid']);
                                unset($dinfo['crawledurls']);
                                unset($dinfo['firstcrawled']);
                                unset($dinfo['lastsuccessfulcrawl']);
                                $dinfo['country'] = $dinfo['countrycode'];
                                unset($dinfo['countrycode']);
                                $dinfo['linkingdomains'] = $dinfo['refdomains'];
                                unset($dinfo['refdomains']);
                                $dinfo['inboundlinks'] = $dinfo['extbacklinks'];
                                unset($dinfo['extbacklinks']);

                                if ($do) {
                                    $dn[$idx]['id'] = $do['id'];
                                    unset($dinfo['alexarank']);//cause we have another cronjob to get the alexarank
                                    Yii::app()->db->createCommand()->update('{{domain}}', $dinfo, 'id=:id', array(':id'=>$do['id']));
                                } else {
                                    $did = Yii::app()->db->createCommand()->insert('{{domain}}', $dinfo);
                                    $dn[$idx]['id'] = Yii::app()->db->getLastInsertID();
                                }
                                $dn[$idx]['domain'] = $dinfo['domain'];
                                $dn[$idx]['hubcount'] = 0;
                                $dn[$idx]['max_acrank'] = 0;

                                $cptbd = array();
                                $cptbd['competitor_id'] = $competitor_id;
                                $cptbd['domain_id'] = $dn[$idx]['id'];
                                if ($datasource == 'historic') {
                                    $cptbd['historic_called'] = $calledtime;
                                } else {
                                    $cptbd['fresh_called'] = $calledtime;
                                }
                                //print_r($dinfo);
                                //print_r($cptbd);
                                Yii::app()->db->createCommand()->insert('{{competitor_backdomain}}', $cptbd);
                                $dn[$idx]['__id'] = Yii::app()->db->getLastInsertID();
                            }
                            //print_r($dn);
                        }

                    }//end foreach


                    foreach ($datatables as $row) {
                        if (strtolower($row['Name']) == 'rootdomain') {
                            $dsheader = "";
                            $dsheader = str_replace("SourceURL", "url", $row['Headers']);
                            $dsheader = str_replace("DomainID", "domain_id", $dsheader);
                            $dsheader = strtolower($dsheader);
                            //$dbks = str_replace("|", "`,`", $dsheader);
                            $hds = explode("|", $dsheader);
                            //print_r($hds);
                            $hdcount = count($hds);
                            //$acrankkey = array_search("acrank", $hds);
                            //unset($hds['domain_id']);
                            $dbks = implode("`,`", $hds);
                            $dbks = "`competitor_id`,`domain`,`fresh_called`,`historic_called`,`".$dbks."`";

                            $total = $row['RowsCount'];
                            $i = 1;
                            $qv = "";

                            //$yiidb = Yii::app()->db;

                            $q = "INSERT INTO {{competitor_backlink}} ($dbks) VALUES ";
                            foreach ($row->Row as $r) {
                                //###$r = Yii::app()->db->quoteValue($r);
                                $r = str_replace("'", "&#39;", $r);
                                $r = str_replace('"', "&#34;", $r);
                                $vs = explode("|", $r);
                                $vcount = count($vs);
                                //if ($vcount > $hdcount) {
                                if ($vcount != $hdcount) {
                                    continue;
                                    /*
                                    if (stripos("http", $vs[$vcount-2]) === false) {
                                        $vs[$vcount-3] = $vs[$vcount-3]."|".$vs[$vcount-2];
                                        unset($vs[$vcount-2]);
                                    }
                                    */
                                }
                                //print_r($vs);

                                $urlinfo = array_combine($hds, $vs);
                                //下面2行顺序一定不能乱，不然会出现domain无法获取的问题
                                $intdid = $urlinfo['domain_id'];
                                $domain = $dn[$intdid]['domain'];
                                $urlinfo['domain_id'] = $dn[$intdid]['id'];
                                /*
                                $urlinfo['anchortext'] = str_replace("'", "&#39;", $urlinfo['anchortext']);
                                $urlinfo['anchortext'] = str_replace('"', "&#34;", $urlinfo['anchortext']);
                                */
                                $dn[$intdid]['hubcount'] += 1;
                                if ($dn[$intdid]['max_acrank'] < $urlinfo['acrank']) 
                                    $dn[$intdid]['max_acrank'] = $urlinfo['acrank'];

                                $comma = ($i > 1) ? ", " : " ";
                                $qv .= $comma;
                                //##$dbv = str_replace("|", "','", $r);
                                $dbv = implode("','", $urlinfo);
                                $qv .= "('{$competitor_id}','{$domain}','{$fresh_called}','{$historic_called}','{$dbv}')";
                                $i ++;
                            }

                            echo $q . $qv;
                            Yii::app()->db->createCommand($q . $qv)->execute();
                        }

                    }//end foreach


                    if (!empty($dn)) {
                        foreach ($dn as $v) {
                            Yii::app()->db->createCommand()->update('{{competitor_backdomain}}',
                                                        array('hubcount' => $v['hubcount'], 'max_acrank' =>$v['max_acrank']),
                                                        'id=:id', array(':id'=>$v['__id']));
                        }
                    }

                    // Commit the transaction
                    $transaction->commit();
                } catch (Exception $e) {
                    // Was there an error?
                    // Error, rollback transaction
                    //print_r($e);
                    echo "Sync Top Backlinks Failure, Please Try It Again.";
                    $transaction->rollback();
                }//end transaction

            }//end if
        }//end if

    }

}
?>